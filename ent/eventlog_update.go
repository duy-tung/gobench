// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/gobench-io/gobench/ent/application"
	"github.com/gobench-io/gobench/ent/eventlog"
	"github.com/gobench-io/gobench/ent/predicate"
)

// EventLogUpdate is the builder for updating EventLog entities.
type EventLogUpdate struct {
	config
	hooks      []Hook
	mutation   *EventLogMutation
	predicates []predicate.EventLog
}

// Where adds a new predicate for the builder.
func (elu *EventLogUpdate) Where(ps ...predicate.EventLog) *EventLogUpdate {
	elu.predicates = append(elu.predicates, ps...)
	return elu
}

// SetApplicationsID sets the applications edge to Application by id.
func (elu *EventLogUpdate) SetApplicationsID(id int) *EventLogUpdate {
	elu.mutation.SetApplicationsID(id)
	return elu
}

// SetNillableApplicationsID sets the applications edge to Application by id if the given value is not nil.
func (elu *EventLogUpdate) SetNillableApplicationsID(id *int) *EventLogUpdate {
	if id != nil {
		elu = elu.SetApplicationsID(*id)
	}
	return elu
}

// SetApplications sets the applications edge to Application.
func (elu *EventLogUpdate) SetApplications(a *Application) *EventLogUpdate {
	return elu.SetApplicationsID(a.ID)
}

// ClearApplications clears the applications edge to Application.
func (elu *EventLogUpdate) ClearApplications() *EventLogUpdate {
	elu.mutation.ClearApplications()
	return elu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (elu *EventLogUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(elu.hooks) == 0 {
		affected, err = elu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			elu.mutation = mutation
			affected, err = elu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(elu.hooks) - 1; i >= 0; i-- {
			mut = elu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EventLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EventLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EventLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (elu *EventLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventlog.Table,
			Columns: eventlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventlog.FieldID,
			},
		},
	}
	if ps := elu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if elu.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.ApplicationsTable,
			Columns: []string{eventlog.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.ApplicationsTable,
			Columns: []string{eventlog.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EventLogUpdateOne is the builder for updating a single EventLog entity.
type EventLogUpdateOne struct {
	config
	hooks    []Hook
	mutation *EventLogMutation
}

// SetApplicationsID sets the applications edge to Application by id.
func (eluo *EventLogUpdateOne) SetApplicationsID(id int) *EventLogUpdateOne {
	eluo.mutation.SetApplicationsID(id)
	return eluo
}

// SetNillableApplicationsID sets the applications edge to Application by id if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableApplicationsID(id *int) *EventLogUpdateOne {
	if id != nil {
		eluo = eluo.SetApplicationsID(*id)
	}
	return eluo
}

// SetApplications sets the applications edge to Application.
func (eluo *EventLogUpdateOne) SetApplications(a *Application) *EventLogUpdateOne {
	return eluo.SetApplicationsID(a.ID)
}

// ClearApplications clears the applications edge to Application.
func (eluo *EventLogUpdateOne) ClearApplications() *EventLogUpdateOne {
	eluo.mutation.ClearApplications()
	return eluo
}

// Save executes the query and returns the updated entity.
func (eluo *EventLogUpdateOne) Save(ctx context.Context) (*EventLog, error) {

	var (
		err  error
		node *EventLog
	)
	if len(eluo.hooks) == 0 {
		node, err = eluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eluo.mutation = mutation
			node, err = eluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eluo.hooks) - 1; i >= 0; i-- {
			mut = eluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EventLogUpdateOne) SaveX(ctx context.Context) *EventLog {
	el, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return el
}

// Exec executes the query on the entity.
func (eluo *EventLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EventLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eluo *EventLogUpdateOne) sqlSave(ctx context.Context) (el *EventLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventlog.Table,
			Columns: eventlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventlog.FieldID,
			},
		},
	}
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing EventLog.ID for update")
	}
	_spec.Node.ID.Value = id
	if eluo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.ApplicationsTable,
			Columns: []string{eventlog.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.ApplicationsTable,
			Columns: []string{eventlog.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	el = &EventLog{config: eluo.config}
	_spec.Assign = el.assignValues
	_spec.ScanValues = el.scanValues()
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return el, nil
}
