// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/gobench-io/gobench/ent/application"
	"github.com/gobench-io/gobench/ent/eventlog"
)

// EventLogCreate is the builder for creating a EventLog entity.
type EventLogCreate struct {
	config
	mutation *EventLogMutation
	hooks    []Hook
}

// SetName sets the name field.
func (elc *EventLogCreate) SetName(s string) *EventLogCreate {
	elc.mutation.SetName(s)
	return elc
}

// SetNillableName sets the name field if the given value is not nil.
func (elc *EventLogCreate) SetNillableName(s *string) *EventLogCreate {
	if s != nil {
		elc.SetName(*s)
	}
	return elc
}

// SetMessage sets the message field.
func (elc *EventLogCreate) SetMessage(s string) *EventLogCreate {
	elc.mutation.SetMessage(s)
	return elc
}

// SetLevel sets the level field.
func (elc *EventLogCreate) SetLevel(s string) *EventLogCreate {
	elc.mutation.SetLevel(s)
	return elc
}

// SetNillableLevel sets the level field if the given value is not nil.
func (elc *EventLogCreate) SetNillableLevel(s *string) *EventLogCreate {
	if s != nil {
		elc.SetLevel(*s)
	}
	return elc
}

// SetSource sets the source field.
func (elc *EventLogCreate) SetSource(s string) *EventLogCreate {
	elc.mutation.SetSource(s)
	return elc
}

// SetCreatedAt sets the created_at field.
func (elc *EventLogCreate) SetCreatedAt(t time.Time) *EventLogCreate {
	elc.mutation.SetCreatedAt(t)
	return elc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (elc *EventLogCreate) SetNillableCreatedAt(t *time.Time) *EventLogCreate {
	if t != nil {
		elc.SetCreatedAt(*t)
	}
	return elc
}

// SetApplicationsID sets the applications edge to Application by id.
func (elc *EventLogCreate) SetApplicationsID(id int) *EventLogCreate {
	elc.mutation.SetApplicationsID(id)
	return elc
}

// SetNillableApplicationsID sets the applications edge to Application by id if the given value is not nil.
func (elc *EventLogCreate) SetNillableApplicationsID(id *int) *EventLogCreate {
	if id != nil {
		elc = elc.SetApplicationsID(*id)
	}
	return elc
}

// SetApplications sets the applications edge to Application.
func (elc *EventLogCreate) SetApplications(a *Application) *EventLogCreate {
	return elc.SetApplicationsID(a.ID)
}

// Save creates the EventLog in the database.
func (elc *EventLogCreate) Save(ctx context.Context) (*EventLog, error) {
	if _, ok := elc.mutation.Name(); !ok {
		v := eventlog.DefaultName
		elc.mutation.SetName(v)
	}
	if _, ok := elc.mutation.Message(); !ok {
		return nil, errors.New("ent: missing required field \"message\"")
	}
	if _, ok := elc.mutation.Level(); !ok {
		v := eventlog.DefaultLevel
		elc.mutation.SetLevel(v)
	}
	if _, ok := elc.mutation.Source(); !ok {
		return nil, errors.New("ent: missing required field \"source\"")
	}
	if _, ok := elc.mutation.CreatedAt(); !ok {
		v := eventlog.DefaultCreatedAt()
		elc.mutation.SetCreatedAt(v)
	}
	var (
		err  error
		node *EventLog
	)
	if len(elc.hooks) == 0 {
		node, err = elc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EventLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			elc.mutation = mutation
			node, err = elc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(elc.hooks) - 1; i >= 0; i-- {
			mut = elc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, elc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (elc *EventLogCreate) SaveX(ctx context.Context) *EventLog {
	v, err := elc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (elc *EventLogCreate) sqlSave(ctx context.Context) (*EventLog, error) {
	var (
		el    = &EventLog{config: elc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: eventlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventlog.FieldID,
			},
		}
	)
	if value, ok := elc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventlog.FieldName,
		})
		el.Name = value
	}
	if value, ok := elc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventlog.FieldMessage,
		})
		el.Message = value
	}
	if value, ok := elc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventlog.FieldLevel,
		})
		el.Level = value
	}
	if value, ok := elc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: eventlog.FieldSource,
		})
		el.Source = value
	}
	if value, ok := elc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: eventlog.FieldCreatedAt,
		})
		el.CreatedAt = value
	}
	if nodes := elc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventlog.ApplicationsTable,
			Columns: []string{eventlog.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: application.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, elc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	el.ID = int(id)
	return el, nil
}
