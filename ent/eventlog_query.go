// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/gobench-io/gobench/ent/application"
	"github.com/gobench-io/gobench/ent/eventlog"
	"github.com/gobench-io/gobench/ent/predicate"
)

// EventLogQuery is the builder for querying EventLog entities.
type EventLogQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.EventLog
	// eager-loading edges.
	withApplications *ApplicationQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (elq *EventLogQuery) Where(ps ...predicate.EventLog) *EventLogQuery {
	elq.predicates = append(elq.predicates, ps...)
	return elq
}

// Limit adds a limit step to the query.
func (elq *EventLogQuery) Limit(limit int) *EventLogQuery {
	elq.limit = &limit
	return elq
}

// Offset adds an offset step to the query.
func (elq *EventLogQuery) Offset(offset int) *EventLogQuery {
	elq.offset = &offset
	return elq
}

// Order adds an order step to the query.
func (elq *EventLogQuery) Order(o ...OrderFunc) *EventLogQuery {
	elq.order = append(elq.order, o...)
	return elq
}

// QueryApplications chains the current query on the applications edge.
func (elq *EventLogQuery) QueryApplications() *ApplicationQuery {
	query := &ApplicationQuery{config: elq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventlog.Table, eventlog.FieldID, elq.sqlQuery()),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventlog.ApplicationsTable, eventlog.ApplicationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(elq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventLog entity in the query. Returns *NotFoundError when no eventlog was found.
func (elq *EventLogQuery) First(ctx context.Context) (*EventLog, error) {
	els, err := elq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(els) == 0 {
		return nil, &NotFoundError{eventlog.Label}
	}
	return els[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (elq *EventLogQuery) FirstX(ctx context.Context) *EventLog {
	el, err := elq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return el
}

// FirstID returns the first EventLog id in the query. Returns *NotFoundError when no id was found.
func (elq *EventLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = elq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventlog.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (elq *EventLogQuery) FirstXID(ctx context.Context) int {
	id, err := elq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only EventLog entity in the query, returns an error if not exactly one entity was returned.
func (elq *EventLogQuery) Only(ctx context.Context) (*EventLog, error) {
	els, err := elq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(els) {
	case 1:
		return els[0], nil
	case 0:
		return nil, &NotFoundError{eventlog.Label}
	default:
		return nil, &NotSingularError{eventlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (elq *EventLogQuery) OnlyX(ctx context.Context) *EventLog {
	el, err := elq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return el
}

// OnlyID returns the only EventLog id in the query, returns an error if not exactly one id was returned.
func (elq *EventLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = elq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventlog.Label}
	default:
		err = &NotSingularError{eventlog.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (elq *EventLogQuery) OnlyXID(ctx context.Context) int {
	id, err := elq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventLogs.
func (elq *EventLogQuery) All(ctx context.Context) ([]*EventLog, error) {
	if err := elq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return elq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (elq *EventLogQuery) AllX(ctx context.Context) []*EventLog {
	els, err := elq.All(ctx)
	if err != nil {
		panic(err)
	}
	return els
}

// IDs executes the query and returns a list of EventLog ids.
func (elq *EventLogQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := elq.Select(eventlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (elq *EventLogQuery) IDsX(ctx context.Context) []int {
	ids, err := elq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (elq *EventLogQuery) Count(ctx context.Context) (int, error) {
	if err := elq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return elq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (elq *EventLogQuery) CountX(ctx context.Context) int {
	count, err := elq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (elq *EventLogQuery) Exist(ctx context.Context) (bool, error) {
	if err := elq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return elq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (elq *EventLogQuery) ExistX(ctx context.Context) bool {
	exist, err := elq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (elq *EventLogQuery) Clone() *EventLogQuery {
	return &EventLogQuery{
		config:     elq.config,
		limit:      elq.limit,
		offset:     elq.offset,
		order:      append([]OrderFunc{}, elq.order...),
		unique:     append([]string{}, elq.unique...),
		predicates: append([]predicate.EventLog{}, elq.predicates...),
		// clone intermediate query.
		sql:  elq.sql.Clone(),
		path: elq.path,
	}
}

//  WithApplications tells the query-builder to eager-loads the nodes that are connected to
// the "applications" edge. The optional arguments used to configure the query builder of the edge.
func (elq *EventLogQuery) WithApplications(opts ...func(*ApplicationQuery)) *EventLogQuery {
	query := &ApplicationQuery{config: elq.config}
	for _, opt := range opts {
		opt(query)
	}
	elq.withApplications = query
	return elq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventLog.Query().
//		GroupBy(eventlog.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (elq *EventLogQuery) GroupBy(field string, fields ...string) *EventLogGroupBy {
	group := &EventLogGroupBy{config: elq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return elq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name"`
//	}
//
//	client.EventLog.Query().
//		Select(eventlog.FieldName).
//		Scan(ctx, &v)
//
func (elq *EventLogQuery) Select(field string, fields ...string) *EventLogSelect {
	selector := &EventLogSelect{config: elq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := elq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return elq.sqlQuery(), nil
	}
	return selector
}

func (elq *EventLogQuery) prepareQuery(ctx context.Context) error {
	if elq.path != nil {
		prev, err := elq.path(ctx)
		if err != nil {
			return err
		}
		elq.sql = prev
	}
	return nil
}

func (elq *EventLogQuery) sqlAll(ctx context.Context) ([]*EventLog, error) {
	var (
		nodes       = []*EventLog{}
		withFKs     = elq.withFKs
		_spec       = elq.querySpec()
		loadedTypes = [1]bool{
			elq.withApplications != nil,
		}
	)
	if elq.withApplications != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, eventlog.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &EventLog{config: elq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, elq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := elq.withApplications; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*EventLog)
		for i := range nodes {
			if fk := nodes[i].application_event_logs; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(application.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "application_event_logs" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Applications = n
			}
		}
	}

	return nodes, nil
}

func (elq *EventLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := elq.querySpec()
	return sqlgraph.CountNodes(ctx, elq.driver, _spec)
}

func (elq *EventLogQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := elq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (elq *EventLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eventlog.Table,
			Columns: eventlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eventlog.FieldID,
			},
		},
		From:   elq.sql,
		Unique: true,
	}
	if ps := elq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := elq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := elq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := elq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (elq *EventLogQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(elq.driver.Dialect())
	t1 := builder.Table(eventlog.Table)
	selector := builder.Select(t1.Columns(eventlog.Columns...)...).From(t1)
	if elq.sql != nil {
		selector = elq.sql
		selector.Select(selector.Columns(eventlog.Columns...)...)
	}
	for _, p := range elq.predicates {
		p(selector)
	}
	for _, p := range elq.order {
		p(selector)
	}
	if offset := elq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := elq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventLogGroupBy is the builder for group-by EventLog entities.
type EventLogGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (elgb *EventLogGroupBy) Aggregate(fns ...AggregateFunc) *EventLogGroupBy {
	elgb.fns = append(elgb.fns, fns...)
	return elgb
}

// Scan applies the group-by query and scan the result into the given value.
func (elgb *EventLogGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := elgb.path(ctx)
	if err != nil {
		return err
	}
	elgb.sql = query
	return elgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (elgb *EventLogGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := elgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (elgb *EventLogGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(elgb.fields) > 1 {
		return nil, errors.New("ent: EventLogGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := elgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (elgb *EventLogGroupBy) StringsX(ctx context.Context) []string {
	v, err := elgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (elgb *EventLogGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(elgb.fields) > 1 {
		return nil, errors.New("ent: EventLogGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := elgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (elgb *EventLogGroupBy) IntsX(ctx context.Context) []int {
	v, err := elgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (elgb *EventLogGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(elgb.fields) > 1 {
		return nil, errors.New("ent: EventLogGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := elgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (elgb *EventLogGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := elgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (elgb *EventLogGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(elgb.fields) > 1 {
		return nil, errors.New("ent: EventLogGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := elgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (elgb *EventLogGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := elgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (elgb *EventLogGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := elgb.sqlQuery().Query()
	if err := elgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (elgb *EventLogGroupBy) sqlQuery() *sql.Selector {
	selector := elgb.sql
	columns := make([]string, 0, len(elgb.fields)+len(elgb.fns))
	columns = append(columns, elgb.fields...)
	for _, fn := range elgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(elgb.fields...)
}

// EventLogSelect is the builder for select fields of EventLog entities.
type EventLogSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (els *EventLogSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := els.path(ctx)
	if err != nil {
		return err
	}
	els.sql = query
	return els.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (els *EventLogSelect) ScanX(ctx context.Context, v interface{}) {
	if err := els.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (els *EventLogSelect) Strings(ctx context.Context) ([]string, error) {
	if len(els.fields) > 1 {
		return nil, errors.New("ent: EventLogSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := els.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (els *EventLogSelect) StringsX(ctx context.Context) []string {
	v, err := els.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (els *EventLogSelect) Ints(ctx context.Context) ([]int, error) {
	if len(els.fields) > 1 {
		return nil, errors.New("ent: EventLogSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := els.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (els *EventLogSelect) IntsX(ctx context.Context) []int {
	v, err := els.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (els *EventLogSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(els.fields) > 1 {
		return nil, errors.New("ent: EventLogSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := els.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (els *EventLogSelect) Float64sX(ctx context.Context) []float64 {
	v, err := els.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (els *EventLogSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(els.fields) > 1 {
		return nil, errors.New("ent: EventLogSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := els.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (els *EventLogSelect) BoolsX(ctx context.Context) []bool {
	v, err := els.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (els *EventLogSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := els.sqlQuery().Query()
	if err := els.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (els *EventLogSelect) sqlQuery() sql.Querier {
	selector := els.sql
	selector.Select(selector.Columns(els.fields...)...)
	return selector
}
